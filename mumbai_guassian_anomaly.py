# -*- coding: utf-8 -*-
"""mumbai_guassian_anomaly.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ovoye3FGa-0p0RuDJMzTOwaACBJTQFOk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib
from sklearn.ensemble import IsolationForest

df = pd.read_csv('https://raw.githubusercontent.com/bhagi8289/mumbai_workshop/master/Vidarbh_MH_Rainfall_115_Years.csv')
df.sample(10)

df.hist()

df['Annual'].plot.hist()

sns.distplot(df['Annual'])
plt.title("Distribution of Annual Rainfall")
sns.despine()

plt.scatter(df['Year'], df['Annual'].values)
plt.xlabel('index')
plt.ylabel('Annual')
plt.title("Annual Rainfall distribution")
sns.despine()

print("Skewness: %f" % df['Annual'].skew())
print("Kurtosis: %f" % df['Annual'].kurt())

isolation_forest = IsolationForest(n_estimators=100)
isolation_forest.fit(df['Annual'].values.reshape(-1, 1))
xx = np.linspace(df['Annual'].min(), df['Annual'].max(), len(df)).reshape(-1,1)
anomaly_score = isolation_forest.decision_function(xx)
outlier = isolation_forest.predict(xx)
plt.figure(figsize=(10,4))
plt.plot(xx, anomaly_score, label='anomaly score')
plt.fill_between(xx.T[0], np.min(anomaly_score), np.max(anomaly_score), 
                 where=outlier==-1, color='r', 
                 alpha=.4, label='outlier region')
plt.legend()
plt.ylabel('anomaly score')
plt.xlabel('Annual Rainfall')
plt.show();

def covariance_matrix(X):
    m, n = X.shape 
    tmp_mat = np.zeros((n, n))
    mu = X.mean(axis=0)
    for i in range(m):
        tmp_mat += np.outer(X[i] - mu, X[i] - mu)
    return tmp_mat / m

covariance_matrix(X_train)

X = df[['Jun','Jul','Aug','Sep']]
X_train = X.to_numpy()

X_train

from sklearn.decomposition import PCA

pca = PCA(2)

x_pca = pca.fit_transform(X_train)

x_pca = pd.DataFrame(x_pca)

x_pca.columns=['PC1','PC2']



# Plot

import matplotlib.pyplot as plt

plt.scatter(X_train[0], X_train[1], alpha=0.8)

plt.title('Scatter plot')

plt.xlabel('x')

plt.ylabel('y')

plt.show()

"""Source: https://towardsdatascience.com/wondering-how-to-build-an-anomaly-detection-model-87d28e50309"""

X.mean()

X.cov()

cov_mat = covariance_matrix(X_train)

len(cov_mat)

cov_mat_inv = np.linalg.pinv(cov_mat)
cov_mat_det = np.linalg.det(cov_mat)

def multi_gauss(x):
    n = len(cov_mat)
    return (np.exp(-0.5 * np.dot(x, np.dot(cov_mat_inv, x.T))) 
            / (2. * np.pi)**(n/2.) 
            / np.sqrt(cov_mat_det))

p = multi_gauss(X.loc[0].values)
p

"""**if p value is less than a threshold epsilon, then it is an anomaly.
The value of epsilon is typically 0.02 but can also be estimated if training data is available.**
"""